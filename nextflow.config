process {
    errorStrategy = 'ignore'
    withName: 'fastqc_reads' {
        cpus = 60          // Customize for specific processes
        memory = '60 GB'
    }
    withName: 'trim_with_fastp_paired' {
        cpus = 60
        memory = '100 GB'
    }
    withName: 'trim_with_fastp_single' {
        cpus = 4
        memory = '10 GB'
    }
    withName: 'align_bwa_paired' {
        cpus = 90
        memory = '100 GB'
    }
    withName: 'align_bwa_single' {
        cpus = 20
        memory = '40 GB'
    }
    withName: 'markDup' {
        cpus = 60
        memory = '40 GB'
    }
    withName: 'samtool_index' {
        cpus = 60
        memory = '40 GB'
    }
    withName: 'germVarCall' {
        cpus = 90 
        memory = '100 GB'
    }
   withName: 'mutect2Filter' {
        cpus = 5
        memory = '40 GB'
    }

    withName: 'KeepPASS' {
        cpus = 30
        memory = '60 GB'
    }

    withName: 'annotVEP' {
        cpus = 100
        memory = '100 GB'
    }

    withName: 'SV_germline' {
        cpus = 60
        memory = '80 GB'
    }

    withName: 'CNV_germline' {
        cpus = 80
        memory = '80 GB'
    }

}

docker {
    enabled = true
}
trace {
    overwrite = true
}
report {
    overwrite = true
}
timeline {
    overwrite = true
}
dag {
    overwrite = true
}
process {
    containerOptions = {
        workflow.containerEngine == 'docker' ?
        "-v ${params.ref_dir}:${params.ref_dir}" :
        null
    }
    env.PATH = "\$HOME/.local/bin:\$PATH"
}
conda {
    enabled = true
    useMicromamba = true
}
// worked with resumeNF.sh to resume proccess
import groovy.json.JsonSlurper

// Define the path to config.json (mounted inside the Docker container)
def paramsFilePath = '/usr/src/app/config.json'

// Use JsonSlurper to parse the JSON file
def jsonSlurper = new JsonSlurper()
def configFile = new File(paramsFilePath)

// Check if the config file exists, then load its content
if (configFile.exists()) {
    def configParams = jsonSlurper.parse(configFile)
    params << configParams // Merge the parsed JSON parameters into params
}
/*
process {
    container = 'rgenxtool:1.1'
    executor = 'local'
}
docker {
    enabled = true
}
*/
//params.data_dir = params.input ?: '/usr/src/app/input'
//params.outdir = params.output ?: '/usr/src/app/output'
//params.refhg38 = params.refhg38 ?:'/usr/src/app/refhg38/Homo_sapiens_assembly38cleaned.fasta'
//params.refhg37 = params.refhg37 ?:'/usr/src/app/refhg37/hg19122XYM.fa'
